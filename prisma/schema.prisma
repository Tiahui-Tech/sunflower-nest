generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Represents possible genders.
enum Gender {
  MALE
  FEMALE
  NON_BINARY
}

/// It represents the status of the anime, in terms of whether it is on air, finished, upcoming, etc.
enum AnimeStatus {
  /// Anime is currently on air.
  ONGOING
  /// Anime has finished airing.
  FINISHED
  /// Anime is yet to be aired.
  UPCOMING
  /// Anime is on an indefinite break
  HIATUS
  /// Anime is in a temporary and definite break
  ON_BREAK
  /// Anime was cancelled/abandoned suddenly
  DROPPED
}

/// Represents a user or profile.
model User {
  id               Int              @id @unique @default(autoincrement())
  email            String           @unique @db.VarChar(255)
  username         String           @unique @db.VarChar(12)
  avatarURL        String
  gender           Gender
  followersCount   Int              @default(0)
  followingCount   Int              @default(0)
  savedAnimesCount Int              @default(0)
  likedAnimesCount Int              @default(0)
  reviewsCount     Int              @default(0)
  savedAnimes      UserAnimeSaved[]
  likedAnimes      UserAnimeLiked[]
  following        Follower[]       @relation("FollowingUsers")
  followers        Follower[]       @relation("UserFollowers")
  reviews          Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

/// Intermediate model for connecting the followers/following of an individual user
model Follower {
  id          Int  @id @default(autoincrement())
  followingId Int
  following   User @relation("FollowingUsers", fields: [followingId], references: [id])
  followerId  Int
  follower    User @relation("UserFollowers", fields: [followerId], references: [id])

  createdAt DateTime @default(now())

  @@index([id, followingId, followerId])
}

/// Represents a genre of anime.
model Genre {
  id     Int     @id @default(autoincrement())
  name   String
  animes Anime[]

  createdAt DateTime @default(now())

  @@index([id])
}

/// Represents a tag of anime.
model Tag {
  id     Int     @id @default(autoincrement())
  name   String
  animes Anime[]

  createdAt DateTime @default(now())

  @@index([id])
}

/// Represents an individual anime.
model Anime {
  id            Int              @id @default(autoincrement())
  title         String
  titleJapan    String
  synopsis      String
  status        AnimeStatus
  airedFrom     DateTime
  airedTo       DateTime
  imageURL      String
  trailerURL    String
  tags          Tag[]
  genres        Genre[]
  reviews       Review[]
  episodes      Episode[]
  episodesCount Int
  castMembers   CastOnAnime[]
  staffMembers  StaffOnAnime[]
  rating        Float            @default(0)
  totalVotes    Int              @default(0)
  viewCount     Int              @default(0)
  savedBy       UserAnimeSaved[]
  likedBy       UserAnimeLiked[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

/// Intermediate model that connects a user to an anime they saved.
model UserAnimeSaved {
  userId  Int
  animeId Int
  user    User  @relation(fields: [userId], references: [id])
  anime   Anime @relation(fields: [animeId], references: [id])

  createdAt DateTime @default(now())

  @@id([userId, animeId])
}

/// Intermediate model connecting user and an anime they are liked of.
model UserAnimeLiked {
  userId  Int
  animeId Int
  user    User  @relation(fields: [userId], references: [id])
  anime   Anime @relation(fields: [animeId], references: [id])

  createdAt DateTime @default(now())

  @@id([userId, animeId])
}

/// Represents a review of an anime.
model Review {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  anime   Anime  @relation(fields: [animeId], references: [id])
  animeId Int
  review  String
  score   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

/// Represents an episode of an anime.
model Episode {
  id         Int      @id @default(autoincrement())
  anime      Anime    @relation(fields: [animeId], references: [id])
  animeId    Int
  episode    Int
  title      String
  titleJapan String
  aired      DateTime
  score      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

/// Represents a cast member of an anime.
model CastMember {
  id              Int           @id @default(autoincrement())
  actor           String
  actorImgURL     String
  character       String
  characterImgURL String
  animes          CastOnAnime[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

/// Represents a staff member of an anime.
model StaffMember {
  id              Int            @id @default(autoincrement())
  actor           String
  actorImgURL     String
  character       String
  characterImgURL String
  animes          StaffOnAnime[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model CastOnAnime {
  castId  Int
  animeId Int
  cast    CastMember @relation(fields: [castId], references: [id])
  anime   Anime      @relation(fields: [animeId], references: [id])

  @@id([castId, animeId])
}

model StaffOnAnime {
  staffId Int
  animeId Int
  staff   StaffMember @relation(fields: [staffId], references: [id])
  anime   Anime       @relation(fields: [animeId], references: [id])

  @@id([staffId, animeId])
}
